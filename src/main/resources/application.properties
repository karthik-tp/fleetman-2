spring.application.name=webapp
server.port=8080
spring.mvc.view.prefix:/WEB-INF/jsp/
spring.mvc.view.suffix:.jsp
spring.datasource.url=jdbc:h2:file:./Database
spring.jpa.properties.hibernate.hbm2ddl.auto=update
security.basic.enabled=false
spring.profiles.active=production

# TODO - get this into some kind of global config.
# MOVED this into CONFIG server
#eureka.client.serviceUrl.defaultZone = http://localhost:8010/eureka

# Generally the settings don't need to change! Remember, on failure
# THE FALLOVER WILL ALWAYS RUN IN THE EVENT OF FAILURE - the breaker
# doesn't need to be open.

# This is how many requests needs to be made to the method before the circuit
# breaker will even consider tripping. Default = 20 in the rolling time window
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=20

# Once the breaker does consider tripping, it decides if the number of failures
# in the rolling time window exceeds this percentage. Default 50%. (ie 0% means a single
# error will be considered a "trip" - but the above needs to be met as well).
#hystrix.command.default.circuitBreaker.errorThresholdPercentage=50

# This is the aforementioned rolling time window. A long one will make
# hystrix "more sensitive".  Default = 10000 (10secs)
#hystrix.command.default.metrics.rollingStats.timeInMilliseconds=10000

# Despite all of the above, after the following period, the breaker will close
# Of course, it can be tripped again. Default = 5000 (5 seconds)
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000


# The following may need to be changed. If this is exceeded, we run fallback
# (and it is considered a fail for the above rules)
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=1000
